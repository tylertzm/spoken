{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/SpeakNow/frontend/src/components/ConnectionStatusDisplay/ConnectionStatusDisplay.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ConnectionStatusDisplay({\n  connectionStatus,\n  onReconnect\n}) {\n  const getStatusClass = status => {\n    if (status.includes('Connected') || status.includes('Recording')) {\n      return 'status-connected';\n    } else if (status.includes('Starting') || status.includes('Connecting')) {\n      return 'status-connecting';\n    } else if (status.includes('Error') || status.includes('Disconnected')) {\n      return 'status-error';\n    }\n    return 'status-default';\n  };\n\n  // Only clickable if not connected/recording\n  const clickable = connectionStatus.includes('Error') || connectionStatus.includes('Disconnected') || connectionStatus.includes('Connection');\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connection-status\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `status-indicator ${getStatusClass(connectionStatus)}${clickable ? ' status-clickable' : ''}`,\n      onClick: clickable && onReconnect ? onReconnect : undefined,\n      style: clickable ? {\n        cursor: 'pointer'\n      } : {},\n      \"aria-label\": clickable ? 'Click to reconnect' : undefined,\n      title: clickable ? 'Click to reconnect' : undefined,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"status-dot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"status-text\",\n        children: connectionStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_c = ConnectionStatusDisplay;\nexport default ConnectionStatusDisplay;\nvar _c;\n$RefreshReg$(_c, \"ConnectionStatusDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ConnectionStatusDisplay","connectionStatus","onReconnect","getStatusClass","status","includes","clickable","className","children","onClick","undefined","style","cursor","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/components/ConnectionStatusDisplay/ConnectionStatusDisplay.jsx"],"sourcesContent":["import React from 'react';\n\nfunction ConnectionStatusDisplay({ connectionStatus, onReconnect }) {\n  const getStatusClass = (status) => {\n    if (status.includes('Connected') || status.includes('Recording')) {\n      return 'status-connected';\n    } else if (status.includes('Starting') || status.includes('Connecting')) {\n      return 'status-connecting';\n    } else if (status.includes('Error') || status.includes('Disconnected')) {\n      return 'status-error';\n    }\n    return 'status-default';\n  };\n\n  // Only clickable if not connected/recording\n  const clickable =\n    connectionStatus.includes('Error') ||\n    connectionStatus.includes('Disconnected') ||\n    connectionStatus.includes('Connection');\n\n  return (\n    <div className=\"connection-status\">\n      <div\n        className={`status-indicator ${getStatusClass(connectionStatus)}${\n          clickable ? ' status-clickable' : ''\n        }`}\n        onClick={clickable && onReconnect ? onReconnect : undefined}\n        style={clickable ? { cursor: 'pointer' } : {}}\n        aria-label={clickable ? 'Click to reconnect' : undefined}\n        title={clickable ? 'Click to reconnect' : undefined}\n      >\n        <div className=\"status-dot\"></div>\n        <span className=\"status-text\">{connectionStatus}</span>\n      </div>\n    </div>\n  );\n}\n\nexport default ConnectionStatusDisplay;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,uBAAuBA,CAAC;EAAEC,gBAAgB;EAAEC;AAAY,CAAC,EAAE;EAClE,MAAMC,cAAc,GAAIC,MAAM,IAAK;IACjC,IAAIA,MAAM,CAACC,QAAQ,CAAC,WAAW,CAAC,IAAID,MAAM,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;MAChE,OAAO,kBAAkB;IAC3B,CAAC,MAAM,IAAID,MAAM,CAACC,QAAQ,CAAC,UAAU,CAAC,IAAID,MAAM,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;MACvE,OAAO,mBAAmB;IAC5B,CAAC,MAAM,IAAID,MAAM,CAACC,QAAQ,CAAC,OAAO,CAAC,IAAID,MAAM,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;MACtE,OAAO,cAAc;IACvB;IACA,OAAO,gBAAgB;EACzB,CAAC;;EAED;EACA,MAAMC,SAAS,GACbL,gBAAgB,CAACI,QAAQ,CAAC,OAAO,CAAC,IAClCJ,gBAAgB,CAACI,QAAQ,CAAC,cAAc,CAAC,IACzCJ,gBAAgB,CAACI,QAAQ,CAAC,YAAY,CAAC;EAEzC,oBACEN,OAAA;IAAKQ,SAAS,EAAC,mBAAmB;IAAAC,QAAA,eAChCT,OAAA;MACEQ,SAAS,EAAE,oBAAoBJ,cAAc,CAACF,gBAAgB,CAAC,GAC7DK,SAAS,GAAG,mBAAmB,GAAG,EAAE,EACnC;MACHG,OAAO,EAAEH,SAAS,IAAIJ,WAAW,GAAGA,WAAW,GAAGQ,SAAU;MAC5DC,KAAK,EAAEL,SAAS,GAAG;QAAEM,MAAM,EAAE;MAAU,CAAC,GAAG,CAAC,CAAE;MAC9C,cAAYN,SAAS,GAAG,oBAAoB,GAAGI,SAAU;MACzDG,KAAK,EAAEP,SAAS,GAAG,oBAAoB,GAAGI,SAAU;MAAAF,QAAA,gBAEpDT,OAAA;QAAKQ,SAAS,EAAC;MAAY;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAClClB,OAAA;QAAMQ,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAEP;MAAgB;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACC,EAAA,GAlCQlB,uBAAuB;AAoChC,eAAeA,uBAAuB;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}