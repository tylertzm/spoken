{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/SpeakNow/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './styles.css';\nimport TranscriptionDisplay from './TranscriptionDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [allTranscriptions, setAllTranscriptions] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('Connecting...');\n  const ws = useRef(null); // holds WebSocket instance\n  const connected = useRef(false); // tracks connection state\n  const retryInterval = useRef(1000); // initial retry interval (ms)\n\n  useEffect(() => {\n    let retryTimeout;\n    let isComponentMounted = true;\n    const connectWebSocket = () => {\n      // Don't create new connection if already connected or component unmounted\n      if (connected.current || !isComponentMounted) {\n        console.log('WebSocket connection already active or component unmounted.');\n        return;\n      }\n\n      // Clean up any existing connection first\n      if (ws.current) {\n        ws.current.close();\n        ws.current = null;\n      }\n      console.log('Attempting to connect to WebSocket...');\n      try {\n        ws.current = new WebSocket('ws://localhost:8000/ws');\n        ws.current.onopen = () => {\n          if (!isComponentMounted) return;\n          console.log('✅ WebSocket connected successfully');\n          connected.current = true;\n          setConnectionStatus('Connected ✅');\n          retryInterval.current = 1000; // reset retry interval on successful connect\n        };\n        ws.current.onmessage = event => {\n          if (!isComponentMounted) return;\n          const newTranscription = event.data;\n          console.log('📥 Received transcription:', newTranscription);\n          setTranscription(newTranscription);\n          setAllTranscriptions(prev => [newTranscription, ...prev]);\n        };\n        ws.current.onclose = event => {\n          if (!isComponentMounted) return;\n          console.log('❌ WebSocket disconnected. Code:', event.code, 'Reason:', event.reason);\n          connected.current = false;\n          setConnectionStatus('Disconnected ❌');\n\n          // Only retry if the component is still mounted and we want to reconnect\n          if (isComponentMounted && event.code !== 1000) {\n            // 1000 is normal closure\n            retryTimeout = setTimeout(() => {\n              if (isComponentMounted) {\n                console.log('🔄 Retrying WebSocket connection...');\n                setConnectionStatus('Reconnecting...');\n                connectWebSocket();\n              }\n            }, retryInterval.current);\n            retryInterval.current = Math.min(retryInterval.current * 2, 30000); // cap at 30s\n          }\n        };\n        ws.current.onerror = error => {\n          if (!isComponentMounted) return;\n          console.error('❌ WebSocket error:', error);\n          connected.current = false;\n          setConnectionStatus('Error ❌');\n        };\n      } catch (error) {\n        if (!isComponentMounted) return;\n        console.error('❌ Failed to create WebSocket connection:', error);\n        connected.current = false;\n        setConnectionStatus('Failed ❌');\n        retryTimeout = setTimeout(() => {\n          if (isComponentMounted) {\n            connectWebSocket();\n          }\n        }, retryInterval.current);\n      }\n    };\n    connectWebSocket();\n    return () => {\n      console.log('🧹 Cleaning up WebSocket connection...');\n      isComponentMounted = false;\n      if (retryTimeout) {\n        clearTimeout(retryTimeout);\n      }\n      if (ws.current) {\n        connected.current = false;\n        ws.current.onopen = null;\n        ws.current.onmessage = null;\n        ws.current.onclose = null;\n        ws.current.onerror = null;\n        ws.current.close();\n        ws.current = null;\n      }\n    };\n  }, []); // Empty dependency array - only run once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '100px',\n          right: '20px',\n          fontSize: '14px',\n          padding: '5px 10px',\n          background: 'rgba(0,0,0,0.1)',\n          borderRadius: '5px'\n        },\n        children: [\"WebSocket: \", connectionStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TranscriptionDisplay, {\n        transcription: transcription,\n        allTranscriptions: allTranscriptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MqxyBvweTkfNVw1CCNIlSc2bk7Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","TranscriptionDisplay","jsxDEV","_jsxDEV","App","_s","transcription","setTranscription","allTranscriptions","setAllTranscriptions","connectionStatus","setConnectionStatus","ws","connected","retryInterval","retryTimeout","isComponentMounted","connectWebSocket","current","console","log","close","WebSocket","onopen","onmessage","event","newTranscription","data","prev","onclose","code","reason","setTimeout","Math","min","onerror","error","clearTimeout","className","children","style","position","top","right","fontSize","padding","background","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './styles.css';\nimport TranscriptionDisplay from './TranscriptionDisplay';\n\nfunction App() {\n  const [transcription, setTranscription] = useState('');\n  const [allTranscriptions, setAllTranscriptions] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('Connecting...');\n\n  const ws = useRef(null); // holds WebSocket instance\n  const connected = useRef(false); // tracks connection state\n  const retryInterval = useRef(1000); // initial retry interval (ms)\n\n  useEffect(() => {\n    let retryTimeout;\n    let isComponentMounted = true;\n\n    const connectWebSocket = () => {\n      // Don't create new connection if already connected or component unmounted\n      if (connected.current || !isComponentMounted) {\n        console.log('WebSocket connection already active or component unmounted.');\n        return;\n      }\n\n      // Clean up any existing connection first\n      if (ws.current) {\n        ws.current.close();\n        ws.current = null;\n      }\n\n      console.log('Attempting to connect to WebSocket...');\n      \n      try {\n        ws.current = new WebSocket('ws://localhost:8000/ws');\n        \n        ws.current.onopen = () => {\n          if (!isComponentMounted) return;\n          console.log('✅ WebSocket connected successfully');\n          connected.current = true;\n          setConnectionStatus('Connected ✅');\n          retryInterval.current = 1000; // reset retry interval on successful connect\n        };\n\n        ws.current.onmessage = (event) => {\n          if (!isComponentMounted) return;\n          const newTranscription = event.data;\n          console.log('📥 Received transcription:', newTranscription);\n          setTranscription(newTranscription);\n          setAllTranscriptions(prev => [newTranscription, ...prev]);\n        };\n\n        ws.current.onclose = (event) => {\n          if (!isComponentMounted) return;\n          console.log('❌ WebSocket disconnected. Code:', event.code, 'Reason:', event.reason);\n          connected.current = false;\n          setConnectionStatus('Disconnected ❌');\n          \n          // Only retry if the component is still mounted and we want to reconnect\n          if (isComponentMounted && event.code !== 1000) { // 1000 is normal closure\n            retryTimeout = setTimeout(() => {\n              if (isComponentMounted) {\n                console.log('🔄 Retrying WebSocket connection...');\n                setConnectionStatus('Reconnecting...');\n                connectWebSocket();\n              }\n            }, retryInterval.current);\n            retryInterval.current = Math.min(retryInterval.current * 2, 30000); // cap at 30s\n          }\n        };\n\n        ws.current.onerror = (error) => {\n          if (!isComponentMounted) return;\n          console.error('❌ WebSocket error:', error);\n          connected.current = false;\n          setConnectionStatus('Error ❌');\n        };\n      } catch (error) {\n        if (!isComponentMounted) return;\n        console.error('❌ Failed to create WebSocket connection:', error);\n        connected.current = false;\n        setConnectionStatus('Failed ❌');\n        retryTimeout = setTimeout(() => {\n          if (isComponentMounted) {\n            connectWebSocket();\n          }\n        }, retryInterval.current);\n      }\n    };\n\n    connectWebSocket();\n\n    return () => {\n      console.log('🧹 Cleaning up WebSocket connection...');\n      isComponentMounted = false;\n      \n      if (retryTimeout) {\n        clearTimeout(retryTimeout);\n      }\n      \n      if (ws.current) {\n        connected.current = false;\n        ws.current.onopen = null;\n        ws.current.onmessage = null;\n        ws.current.onclose = null;\n        ws.current.onerror = null;\n        ws.current.close();\n        ws.current = null;\n      }\n    };\n  }, []); // Empty dependency array - only run once\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{ position: 'absolute', top: '100px', right: '20px', fontSize: '14px', padding: '5px 10px', background: 'rgba(0,0,0,0.1)', borderRadius: '5px' }}>\n          WebSocket: {connectionStatus}\n        </div>\n        <TranscriptionDisplay\n          transcription={transcription}\n          allTranscriptions={allTranscriptions}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}