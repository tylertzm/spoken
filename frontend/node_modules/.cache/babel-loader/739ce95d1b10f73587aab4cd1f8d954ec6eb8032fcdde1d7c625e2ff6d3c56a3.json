{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/SpeakNow/frontend/src/LiveTranscriptionDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LiveTranscriptionDisplay({\n  transcription\n}) {\n  _s();\n  const liveTextRef = useRef(null);\n  useEffect(() => {\n    const adjustFontSize = () => {\n      const textElement = liveTextRef.current;\n      if (!textElement) return;\n      const container = textElement.parentElement;\n      if (!container) return;\n\n      // Reset font size to default first\n      textElement.style.fontSize = '';\n\n      // Get the computed styles\n      const containerHeight = container.clientHeight - 40; // Account for padding\n      const containerWidth = container.clientWidth - 40; // Account for padding\n\n      // Check if text overflows\n      let fontSize = parseFloat(window.getComputedStyle(textElement).fontSize);\n      const maxFontSize = fontSize; // Store original size as max\n\n      // Reduce font size until text fits\n      while ((textElement.scrollHeight > containerHeight || textElement.scrollWidth > containerWidth) && fontSize > 12) {\n        fontSize -= 2;\n        textElement.style.fontSize = `${fontSize}px`;\n      }\n\n      // Don't exceed the maximum font size\n      if (fontSize > maxFontSize) {\n        textElement.style.fontSize = `${maxFontSize}px`;\n      }\n    };\n\n    // Adjust on text change\n    if (transcription) {\n      adjustFontSize();\n    }\n\n    // Adjust on window resize\n    window.addEventListener('resize', adjustFontSize);\n    return () => window.removeEventListener('resize', adjustFontSize);\n  }, [transcription]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transcription-cell\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transcription-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        ref: liveTextRef,\n        className: \"live-text\",\n        children: transcription || 'Waiting for speech...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '12px',\n          color: '#666',\n          marginTop: '10px'\n        },\n        children: [\"Debug: \\\"\", transcription, \"\\\" | Length: \", (transcription === null || transcription === void 0 ? void 0 : transcription.length) || 0]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(LiveTranscriptionDisplay, \"3Nge09UFWkNTQaytQNBeMYEY4B8=\");\n_c = LiveTranscriptionDisplay;\nexport default LiveTranscriptionDisplay;\nvar _c;\n$RefreshReg$(_c, \"LiveTranscriptionDisplay\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","LiveTranscriptionDisplay","transcription","_s","liveTextRef","adjustFontSize","textElement","current","container","parentElement","style","fontSize","containerHeight","clientHeight","containerWidth","clientWidth","parseFloat","window","getComputedStyle","maxFontSize","scrollHeight","scrollWidth","addEventListener","removeEventListener","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","color","marginTop","length","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/LiveTranscriptionDisplay.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nfunction LiveTranscriptionDisplay({ transcription }) {\n  const liveTextRef = useRef(null);\n\n  useEffect(() => {\n    const adjustFontSize = () => {\n      const textElement = liveTextRef.current;\n      if (!textElement) return;\n\n      const container = textElement.parentElement;\n      if (!container) return;\n\n      // Reset font size to default first\n      textElement.style.fontSize = '';\n      \n      // Get the computed styles\n      const containerHeight = container.clientHeight - 40; // Account for padding\n      const containerWidth = container.clientWidth - 40; // Account for padding\n      \n      // Check if text overflows\n      let fontSize = parseFloat(window.getComputedStyle(textElement).fontSize);\n      const maxFontSize = fontSize; // Store original size as max\n      \n      // Reduce font size until text fits\n      while ((textElement.scrollHeight > containerHeight || textElement.scrollWidth > containerWidth) && fontSize > 12) {\n        fontSize -= 2;\n        textElement.style.fontSize = `${fontSize}px`;\n      }\n      \n      // Don't exceed the maximum font size\n      if (fontSize > maxFontSize) {\n        textElement.style.fontSize = `${maxFontSize}px`;\n      }\n    };\n\n    // Adjust on text change\n    if (transcription) {\n      adjustFontSize();\n    }\n\n    // Adjust on window resize\n    window.addEventListener('resize', adjustFontSize);\n    return () => window.removeEventListener('resize', adjustFontSize);\n  }, [transcription]);\n\n  return (\n    <div className=\"transcription-cell\">\n      <div className=\"transcription-display\">\n        <p ref={liveTextRef} className=\"live-text\">\n          {transcription || 'Waiting for speech...'}\n        </p>\n        <div style={{ fontSize: '12px', color: '#666', marginTop: '10px' }}>\n          Debug: \"{transcription}\" | Length: {transcription?.length || 0}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LiveTranscriptionDisplay; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,wBAAwBA,CAAC;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACnD,MAAMC,WAAW,GAAGN,MAAM,CAAC,IAAI,CAAC;EAEhCD,SAAS,CAAC,MAAM;IACd,MAAMQ,cAAc,GAAGA,CAAA,KAAM;MAC3B,MAAMC,WAAW,GAAGF,WAAW,CAACG,OAAO;MACvC,IAAI,CAACD,WAAW,EAAE;MAElB,MAAME,SAAS,GAAGF,WAAW,CAACG,aAAa;MAC3C,IAAI,CAACD,SAAS,EAAE;;MAEhB;MACAF,WAAW,CAACI,KAAK,CAACC,QAAQ,GAAG,EAAE;;MAE/B;MACA,MAAMC,eAAe,GAAGJ,SAAS,CAACK,YAAY,GAAG,EAAE,CAAC,CAAC;MACrD,MAAMC,cAAc,GAAGN,SAAS,CAACO,WAAW,GAAG,EAAE,CAAC,CAAC;;MAEnD;MACA,IAAIJ,QAAQ,GAAGK,UAAU,CAACC,MAAM,CAACC,gBAAgB,CAACZ,WAAW,CAAC,CAACK,QAAQ,CAAC;MACxE,MAAMQ,WAAW,GAAGR,QAAQ,CAAC,CAAC;;MAE9B;MACA,OAAO,CAACL,WAAW,CAACc,YAAY,GAAGR,eAAe,IAAIN,WAAW,CAACe,WAAW,GAAGP,cAAc,KAAKH,QAAQ,GAAG,EAAE,EAAE;QAChHA,QAAQ,IAAI,CAAC;QACbL,WAAW,CAACI,KAAK,CAACC,QAAQ,GAAG,GAAGA,QAAQ,IAAI;MAC9C;;MAEA;MACA,IAAIA,QAAQ,GAAGQ,WAAW,EAAE;QAC1Bb,WAAW,CAACI,KAAK,CAACC,QAAQ,GAAG,GAAGQ,WAAW,IAAI;MACjD;IACF,CAAC;;IAED;IACA,IAAIjB,aAAa,EAAE;MACjBG,cAAc,CAAC,CAAC;IAClB;;IAEA;IACAY,MAAM,CAACK,gBAAgB,CAAC,QAAQ,EAAEjB,cAAc,CAAC;IACjD,OAAO,MAAMY,MAAM,CAACM,mBAAmB,CAAC,QAAQ,EAAElB,cAAc,CAAC;EACnE,CAAC,EAAE,CAACH,aAAa,CAAC,CAAC;EAEnB,oBACEF,OAAA;IAAKwB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,eACjCzB,OAAA;MAAKwB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,gBACpCzB,OAAA;QAAG0B,GAAG,EAAEtB,WAAY;QAACoB,SAAS,EAAC,WAAW;QAAAC,QAAA,EACvCvB,aAAa,IAAI;MAAuB;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACJ9B,OAAA;QAAKU,KAAK,EAAE;UAAEC,QAAQ,EAAE,MAAM;UAAEoB,KAAK,EAAE,MAAM;UAAEC,SAAS,EAAE;QAAO,CAAE;QAAAP,QAAA,GAAC,WAC1D,EAACvB,aAAa,EAAC,eAAY,EAAC,CAAAA,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAE+B,MAAM,KAAI,CAAC;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC3B,EAAA,CAxDQF,wBAAwB;AAAAiC,EAAA,GAAxBjC,wBAAwB;AA0DjC,eAAeA,wBAAwB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}