{"ast":null,"code":"// TaskDisplay.js\n// Node.js backend utility to fetch Gemma's response using groq-sdk\nimport { Groq } from 'groq-sdk';\nexport async function fetchGemmaWeather() {\n  const groq = new Groq();\n  let result = '';\n  try {\n    const chatCompletion = await groq.chat.completions.create({\n      messages: [{\n        role: 'user',\n        content: 'how is the weather today?'\n      }],\n      model: 'gemma2-9b-it',\n      temperature: 1,\n      max_completion_tokens: 1024,\n      top_p: 1,\n      stream: true,\n      stop: null\n    });\n    for await (const chunk of chatCompletion) {\n      var _chunk$choices$, _chunk$choices$$delta;\n      result += ((_chunk$choices$ = chunk.choices[0]) === null || _chunk$choices$ === void 0 ? void 0 : (_chunk$choices$$delta = _chunk$choices$.delta) === null || _chunk$choices$$delta === void 0 ? void 0 : _chunk$choices$$delta.content) || '';\n    }\n    return {\n      response: result,\n      error: null\n    };\n  } catch (err) {\n    return {\n      response: '',\n      error: err.message\n    };\n  }\n}","map":{"version":3,"names":["Groq","fetchGemmaWeather","groq","result","chatCompletion","chat","completions","create","messages","role","content","model","temperature","max_completion_tokens","top_p","stream","stop","chunk","_chunk$choices$","_chunk$choices$$delta","choices","delta","response","error","err","message"],"sources":["/Users/tyler/Documents/spoken/frontend/src/components/TaskDisplay/TaskDisplay.js"],"sourcesContent":["// TaskDisplay.js\n// Node.js backend utility to fetch Gemma's response using groq-sdk\nimport { Groq } from 'groq-sdk';\n\nexport async function fetchGemmaWeather() {\n  const groq = new Groq();\n  let result = '';\n  try {\n    const chatCompletion = await groq.chat.completions.create({\n      messages: [\n        {\n          role: 'user',\n          content: 'how is the weather today?'\n        }\n      ],\n      model: 'gemma2-9b-it',\n      temperature: 1,\n      max_completion_tokens: 1024,\n      top_p: 1,\n      stream: true,\n      stop: null\n    });\n    for await (const chunk of chatCompletion) {\n      result += chunk.choices[0]?.delta?.content || '';\n    }\n    return { response: result, error: null };\n  } catch (err) {\n    return { response: '', error: err.message };\n  }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,IAAI,QAAQ,UAAU;AAE/B,OAAO,eAAeC,iBAAiBA,CAAA,EAAG;EACxC,MAAMC,IAAI,GAAG,IAAIF,IAAI,CAAC,CAAC;EACvB,IAAIG,MAAM,GAAG,EAAE;EACf,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMF,IAAI,CAACG,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACxDC,QAAQ,EAAE,CACR;QACEC,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;MACX,CAAC,CACF;MACDC,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE,CAAC;MACdC,qBAAqB,EAAE,IAAI;MAC3BC,KAAK,EAAE,CAAC;MACRC,MAAM,EAAE,IAAI;MACZC,IAAI,EAAE;IACR,CAAC,CAAC;IACF,WAAW,MAAMC,KAAK,IAAIb,cAAc,EAAE;MAAA,IAAAc,eAAA,EAAAC,qBAAA;MACxChB,MAAM,IAAI,EAAAe,eAAA,GAAAD,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,cAAAF,eAAA,wBAAAC,qBAAA,GAAhBD,eAAA,CAAkBG,KAAK,cAAAF,qBAAA,uBAAvBA,qBAAA,CAAyBT,OAAO,KAAI,EAAE;IAClD;IACA,OAAO;MAAEY,QAAQ,EAAEnB,MAAM;MAAEoB,KAAK,EAAE;IAAK,CAAC;EAC1C,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,OAAO;MAAEF,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAEC,GAAG,CAACC;IAAQ,CAAC;EAC7C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}