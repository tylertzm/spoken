{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/SpeakNow/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport TranscriptionDisplay from './TranscriptionDisplay'; // Assuming you have a TranscriptionDisplay component\nimport logo from './logo_lightmode.svg'; // Import your logo if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [allTranscriptions, setAllTranscriptions] = useState([]);\n  useEffect(() => {\n    // The WebSocket URL should point to your FastAPI backend\n    const ws = new WebSocket('ws://localhost:8000/ws');\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n    ws.onmessage = event => {\n      const newTranscription = event.data;\n      console.log('Received:', newTranscription);\n      setTranscription(newTranscription); // Show the latest transcription\n      // Add the new transcription to the top of the list\n      setAllTranscriptions(prev => [newTranscription, ...prev]);\n    };\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n    };\n\n    // Clean up the connection when the component unmounts\n    return () => {\n      // Only close the connection if it's currently open\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, []); // The empty array ensures this effect runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logo,\n      className: \"App-logo\",\n      alt: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TranscriptionDisplay, {\n        transcription: transcription,\n        allTranscriptions: allTranscriptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"XQ192bVUlN/gEtoUt1ICUEV1GW0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TranscriptionDisplay","logo","jsxDEV","_jsxDEV","App","_s","transcription","setTranscription","allTranscriptions","setAllTranscriptions","ws","WebSocket","onopen","console","log","onmessage","event","newTranscription","data","prev","onclose","onerror","error","readyState","OPEN","close","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport TranscriptionDisplay from './TranscriptionDisplay'; // Assuming you have a TranscriptionDisplay component\nimport logo from './logo_lightmode.svg'; // Import your logo if needed\nfunction App() {\n  const [transcription, setTranscription] = useState('');\n  const [allTranscriptions, setAllTranscriptions] = useState([]);\n\n  useEffect(() => {\n    // The WebSocket URL should point to your FastAPI backend\n    const ws = new WebSocket('ws://localhost:8000/ws');\n\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n    };\n\n    ws.onmessage = (event) => {\n      const newTranscription = event.data;\n      console.log('Received:', newTranscription);\n      setTranscription(newTranscription); // Show the latest transcription\n      // Add the new transcription to the top of the list\n      setAllTranscriptions(prev => [newTranscription, ...prev]); \n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n    };\n\n    // Clean up the connection when the component unmounts\n    return () => {\n      // Only close the connection if it's currently open\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, []); // The empty array ensures this effect runs only once\n\n  return (\n    <div className=\"App\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <TranscriptionDisplay \n          transcription={transcription} \n          allTranscriptions={allTranscriptions} \n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AACrB,OAAOC,oBAAoB,MAAM,wBAAwB,CAAC,CAAC;AAC3D,OAAOC,IAAI,MAAM,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACzC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE9DC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,EAAE,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;IAElDD,EAAE,CAACE,MAAM,GAAG,MAAM;MAChBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAEDJ,EAAE,CAACK,SAAS,GAAIC,KAAK,IAAK;MACxB,MAAMC,gBAAgB,GAAGD,KAAK,CAACE,IAAI;MACnCL,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEG,gBAAgB,CAAC;MAC1CV,gBAAgB,CAACU,gBAAgB,CAAC,CAAC,CAAC;MACpC;MACAR,oBAAoB,CAACU,IAAI,IAAI,CAACF,gBAAgB,EAAE,GAAGE,IAAI,CAAC,CAAC;IAC3D,CAAC;IAEDT,EAAE,CAACU,OAAO,GAAG,MAAM;MACjBP,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAEDJ,EAAE,CAACW,OAAO,GAAIC,KAAK,IAAK;MACtBT,OAAO,CAACS,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;;IAED;IACA,OAAO,MAAM;MACX;MACA,IAAIZ,EAAE,CAACa,UAAU,KAAKZ,SAAS,CAACa,IAAI,EAAE;QACpCd,EAAE,CAACe,KAAK,CAAC,CAAC;MACZ;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEtB,OAAA;IAAKuB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBxB,OAAA;MAAKyB,GAAG,EAAE3B,IAAK;MAACyB,SAAS,EAAC,UAAU;MAACG,GAAG,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAElD9B,OAAA;MAAQuB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BxB,OAAA;QAAKyB,GAAG,EAAE3B,IAAK;QAACyB,SAAS,EAAC,UAAU;QAACG,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClD9B,OAAA,CAACH,oBAAoB;QACnBM,aAAa,EAAEA,aAAc;QAC7BE,iBAAiB,EAAEA;MAAkB;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAC5B,EAAA,CAlDQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}