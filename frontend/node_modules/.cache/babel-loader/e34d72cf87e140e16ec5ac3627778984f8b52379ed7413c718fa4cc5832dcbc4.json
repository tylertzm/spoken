{"ast":null,"code":"// WebRTCService.js - Real-time audio streaming with WebRTC\nclass WebRTCService{constructor(){this.listeners=new Set();this.isStreaming=false;this.mediaStream=null;this.peerConnection=null;this.dataChannel=null;this.audioContext=null;this.mediaRecorder=null;}addListener(callback){this.listeners.add(callback);// Start streaming when first listener is added\nif(this.listeners.size===1&&!this.isStreaming){this.startAudioStreaming();}}removeListener(callback){this.listeners.delete(callback);// Stop streaming when no listeners remain\nif(this.listeners.size===0){this.stopAudioStreaming();}}notifyListeners(message){this.listeners.forEach(callback=>{try{callback(message);}catch(error){console.error('Error in WebRTC listener:',error);}});}async startAudioStreaming(){if(this.isStreaming)return;try{console.log('üéôÔ∏è Starting WebRTC audio streaming...');this.notifyListeners({type:'status',data:'Starting audio...'});// Get microphone access with specific constraints for better compatibility\nthis.mediaStream=await navigator.mediaDevices.getUserMedia({audio:{echoCancellation:true,noiseSuppression:true,autoGainControl:true,sampleRate:16000,channelCount:1// Mono audio\n}});console.log('üé§ Microphone access granted');this.notifyListeners({type:'status',data:'Microphone ready ‚úÖ'});// Create WebSocket connection for signaling\nawait this.createWebSocketConnection();// Set up audio processing with Web Audio API for better control\nawait this.setupWebAudioProcessing();this.isStreaming=true;console.log('üöÄ WebRTC audio streaming started');}catch(error){console.error('‚ùå Failed to start audio streaming:',error);this.notifyListeners({type:'status',data:\"Error: \".concat(error.message,\" \\u274C\")});}}async createWebSocketConnection(){return new Promise((resolve,reject)=>{const ws=new WebSocket('ws://localhost:8000/webrtc');ws.onopen=()=>{console.log('üì° WebSocket connected');this.signalingSocket=ws;this.notifyListeners({type:'status',data:'Connected ‚úÖ'});ws.onmessage=event=>{try{const data=JSON.parse(event.data);if(data.type==='transcription'){console.log('üì• Received transcription:',data.text);this.notifyListeners({type:'transcription',data:data.text});}else if(data.type==='status'){console.log('üìä Status update:',data.message);this.notifyListeners({type:'status',data:data.message});}}catch(error){console.error('‚ùå Error parsing WebSocket message:',error);}};resolve();};ws.onerror=error=>{console.error('‚ùå WebSocket error:',error);this.notifyListeners({type:'status',data:'Connection error ‚ùå'});reject(error);};ws.onclose=event=>{console.log('üì° WebSocket disconnected:',event.code,event.reason);this.signalingSocket=null;this.notifyListeners({type:'status',data:'Disconnected ‚ùå'});// Don't automatically reconnect to avoid connection loops\n// The component will restart the connection when needed\n};});}async setupWebAudioProcessing(){try{// Create AudioContext for raw audio processing\nthis.audioContext=new(window.AudioContext||window.webkitAudioContext)({sampleRate:16000});// Load the AudioWorklet processor with cache busting\nconst processorUrl=\"/audio-processor.js?v=\".concat(Date.now());await this.audioContext.audioWorklet.addModule(processorUrl);// Create source node from microphone stream\nconst source=this.audioContext.createMediaStreamSource(this.mediaStream);// Create AudioWorkletNode for raw audio data processing\nthis.processor=new AudioWorkletNode(this.audioContext,'audio-processor');// Listen for processed audio data from the worklet\nthis.processor.port.onmessage=event=>{var _this$signalingSocket,_this$signalingSocket2;if(event.data.type==='audioData'&&((_this$signalingSocket=this.signalingSocket)===null||_this$signalingSocket===void 0?void 0:_this$signalingSocket.readyState)===WebSocket.OPEN){// Send real-time audio chunks for streaming\nif(event.data.realtime){const pcmBuffer=event.data.data;const sampleCount=event.data.sampleCount||4096;console.log(\"\\uD83C\\uDFB5 Sending real-time PCM audio: \".concat(pcmBuffer.byteLength,\" bytes (\").concat(sampleCount,\" samples)\"));this.signalingSocket.send(pcmBuffer);}}else if(event.data.type==='transcriptionChunk'&&((_this$signalingSocket2=this.signalingSocket)===null||_this$signalingSocket2===void 0?void 0:_this$signalingSocket2.readyState)===WebSocket.OPEN){// Send 3-second chunks for transcription\nconst pcmBuffer=event.data.data;const duration=event.data.duration;const chunkId=event.data.chunkId;console.log(\"\\uD83C\\uDFA4 Sending transcription chunk \".concat(chunkId,\": \").concat(pcmBuffer.byteLength,\" bytes, \").concat(duration.toFixed(2),\"s\"));// Send metadata first, then audio data\nconst message=JSON.stringify({type:'transcriptionChunk',chunkId:chunkId,duration:duration,sampleCount:event.data.sampleCount});this.signalingSocket.send(message);this.signalingSocket.send(pcmBuffer);}};// Connect the audio processing chain\nsource.connect(this.processor);this.processor.connect(this.audioContext.destination);console.log('üî¥ AudioWorklet processing started');this.notifyListeners({type:'status',data:'Recording with AudioWorklet... üî¥'});}catch(error){console.error('‚ùå Failed to setup AudioWorklet:',error);// Fallback to ScriptProcessorNode if AudioWorklet fails\nthis.setupFallbackAudioProcessing();}}setupFallbackAudioProcessing(){console.log('‚ö†Ô∏è Falling back to ScriptProcessorNode (deprecated)');// Create source node from microphone stream\nconst source=this.audioContext.createMediaStreamSource(this.mediaStream);// Create ScriptProcessorNode for raw audio data\nconst bufferSize=4096;this.processor=this.audioContext.createScriptProcessor(bufferSize,1,1);this.processor.onaudioprocess=event=>{var _this$signalingSocket3;if(((_this$signalingSocket3=this.signalingSocket)===null||_this$signalingSocket3===void 0?void 0:_this$signalingSocket3.readyState)===WebSocket.OPEN){const inputBuffer=event.inputBuffer;const inputData=inputBuffer.getChannelData(0);// Get mono channel\n// Convert Float32Array to Int16Array (PCM 16-bit)\nconst pcmData=new Int16Array(inputData.length);for(let i=0;i<inputData.length;i++){// Convert from -1.0 to 1.0 range to -32768 to 32767 range\nconst sample=Math.max(-1,Math.min(1,inputData[i]));pcmData[i]=sample<0?sample*0x8000:sample*0x7FFF;}// Send raw PCM data\nconsole.log('üéµ Sending PCM audio chunk (fallback):',pcmData.length,'samples');this.signalingSocket.send(pcmData.buffer);}};// Connect the audio processing chain\nsource.connect(this.processor);this.processor.connect(this.audioContext.destination);console.log('üî¥ Fallback audio processing started');this.notifyListeners({type:'status',data:'Recording (fallback mode)... üî¥'});}stopAudioStreaming(){console.log('üõë Stopping WebRTC audio streaming...');this.isStreaming=false;// Stop audio processing\nif(this.processor){this.processor.disconnect();// Clean up AudioWorkletNode port if it exists\nif(this.processor.port){this.processor.port.onmessage=null;}this.processor=null;}if(this.audioContext){this.audioContext.close();this.audioContext=null;}// Close WebSocket\nif(this.signalingSocket){this.signalingSocket.close();this.signalingSocket=null;}// Stop media stream\nif(this.mediaStream){this.mediaStream.getTracks().forEach(track=>track.stop());this.mediaStream=null;}this.notifyListeners({type:'status',data:'Stopped ‚èπÔ∏è'});console.log('‚úÖ WebRTC audio streaming stopped');}// Force cleanup - useful for debugging\nforceCleanup(){console.log('üî• Force cleanup: clearing all listeners and stopping streaming');this.listeners.clear();this.stopAudioStreaming();}}// Create singleton instance\nconst webRTCService=new WebRTCService();// Make it available globally for debugging\nif(typeof window!=='undefined'){window.webRTCService=webRTCService;console.log('üîß WebRTCService available globally as window.webRTCService');}export default webRTCService;","map":{"version":3,"names":["WebRTCService","constructor","listeners","Set","isStreaming","mediaStream","peerConnection","dataChannel","audioContext","mediaRecorder","addListener","callback","add","size","startAudioStreaming","removeListener","delete","stopAudioStreaming","notifyListeners","message","forEach","error","console","log","type","data","navigator","mediaDevices","getUserMedia","audio","echoCancellation","noiseSuppression","autoGainControl","sampleRate","channelCount","createWebSocketConnection","setupWebAudioProcessing","concat","Promise","resolve","reject","ws","WebSocket","onopen","signalingSocket","onmessage","event","JSON","parse","text","onerror","onclose","code","reason","window","AudioContext","webkitAudioContext","processorUrl","Date","now","audioWorklet","addModule","source","createMediaStreamSource","processor","AudioWorkletNode","port","_this$signalingSocket","_this$signalingSocket2","readyState","OPEN","realtime","pcmBuffer","sampleCount","byteLength","send","duration","chunkId","toFixed","stringify","connect","destination","setupFallbackAudioProcessing","bufferSize","createScriptProcessor","onaudioprocess","_this$signalingSocket3","inputBuffer","inputData","getChannelData","pcmData","Int16Array","length","i","sample","Math","max","min","buffer","disconnect","close","getTracks","track","stop","forceCleanup","clear","webRTCService"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/WebRTCService.js"],"sourcesContent":["// WebRTCService.js - Real-time audio streaming with WebRTC\nclass WebRTCService {\n  constructor() {\n    this.listeners = new Set();\n    this.isStreaming = false;\n    this.mediaStream = null;\n    this.peerConnection = null;\n    this.dataChannel = null;\n    this.audioContext = null;\n    this.mediaRecorder = null;\n  }\n\n  addListener(callback) {\n    this.listeners.add(callback);\n    \n    // Start streaming when first listener is added\n    if (this.listeners.size === 1 && !this.isStreaming) {\n      this.startAudioStreaming();\n    }\n  }\n\n  removeListener(callback) {\n    this.listeners.delete(callback);\n    \n    // Stop streaming when no listeners remain\n    if (this.listeners.size === 0) {\n      this.stopAudioStreaming();\n    }\n  }\n\n  notifyListeners(message) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(message);\n      } catch (error) {\n        console.error('Error in WebRTC listener:', error);\n      }\n    });\n  }\n\n  async startAudioStreaming() {\n    if (this.isStreaming) return;\n\n    try {\n      console.log('üéôÔ∏è Starting WebRTC audio streaming...');\n      this.notifyListeners({ type: 'status', data: 'Starting audio...' });\n\n      // Get microphone access with specific constraints for better compatibility\n      this.mediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          echoCancellation: true,\n          noiseSuppression: true,\n          autoGainControl: true,\n          sampleRate: 16000,\n          channelCount: 1  // Mono audio\n        }\n      });\n\n      console.log('üé§ Microphone access granted');\n      this.notifyListeners({ type: 'status', data: 'Microphone ready ‚úÖ' });\n\n      // Create WebSocket connection for signaling\n      await this.createWebSocketConnection();\n\n      // Set up audio processing with Web Audio API for better control\n      await this.setupWebAudioProcessing();\n\n      this.isStreaming = true;\n      console.log('üöÄ WebRTC audio streaming started');\n\n    } catch (error) {\n      console.error('‚ùå Failed to start audio streaming:', error);\n      this.notifyListeners({ type: 'status', data: `Error: ${error.message} ‚ùå` });\n    }\n  }\n\n  async createWebSocketConnection() {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket('ws://localhost:8000/webrtc');\n      \n      ws.onopen = () => {\n        console.log('üì° WebSocket connected');\n        this.signalingSocket = ws;\n        this.notifyListeners({ type: 'status', data: 'Connected ‚úÖ' });\n        \n        ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            if (data.type === 'transcription') {\n              console.log('üì• Received transcription:', data.text);\n              this.notifyListeners({ type: 'transcription', data: data.text });\n            } else if (data.type === 'status') {\n              console.log('üìä Status update:', data.message);\n              this.notifyListeners({ type: 'status', data: data.message });\n            }\n          } catch (error) {\n            console.error('‚ùå Error parsing WebSocket message:', error);\n          }\n        };\n        \n        resolve();\n      };\n      \n      ws.onerror = (error) => {\n        console.error('‚ùå WebSocket error:', error);\n        this.notifyListeners({ type: 'status', data: 'Connection error ‚ùå' });\n        reject(error);\n      };\n      \n      ws.onclose = (event) => {\n        console.log('üì° WebSocket disconnected:', event.code, event.reason);\n        this.signalingSocket = null;\n        this.notifyListeners({ type: 'status', data: 'Disconnected ‚ùå' });\n        \n        // Don't automatically reconnect to avoid connection loops\n        // The component will restart the connection when needed\n      };\n    });\n  }\n\n  async setupWebAudioProcessing() {\n    try {\n      // Create AudioContext for raw audio processing\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: 16000\n      });\n      \n      // Load the AudioWorklet processor with cache busting\n      const processorUrl = `/audio-processor.js?v=${Date.now()}`;\n      await this.audioContext.audioWorklet.addModule(processorUrl);\n      \n      // Create source node from microphone stream\n      const source = this.audioContext.createMediaStreamSource(this.mediaStream);\n      \n      // Create AudioWorkletNode for raw audio data processing\n      this.processor = new AudioWorkletNode(this.audioContext, 'audio-processor');\n      \n      // Listen for processed audio data from the worklet\n      this.processor.port.onmessage = (event) => {\n        if (event.data.type === 'audioData' && this.signalingSocket?.readyState === WebSocket.OPEN) {\n          // Send real-time audio chunks for streaming\n          if (event.data.realtime) {\n            const pcmBuffer = event.data.data;\n            const sampleCount = event.data.sampleCount || 4096;\n            console.log(`üéµ Sending real-time PCM audio: ${pcmBuffer.byteLength} bytes (${sampleCount} samples)`);\n            this.signalingSocket.send(pcmBuffer);\n          }\n        } else if (event.data.type === 'transcriptionChunk' && this.signalingSocket?.readyState === WebSocket.OPEN) {\n          // Send 3-second chunks for transcription\n          const pcmBuffer = event.data.data;\n          const duration = event.data.duration;\n          const chunkId = event.data.chunkId;\n          console.log(`üé§ Sending transcription chunk ${chunkId}: ${pcmBuffer.byteLength} bytes, ${duration.toFixed(2)}s`);\n          \n          // Send metadata first, then audio data\n          const message = JSON.stringify({\n            type: 'transcriptionChunk',\n            chunkId: chunkId,\n            duration: duration,\n            sampleCount: event.data.sampleCount\n          });\n          this.signalingSocket.send(message);\n          this.signalingSocket.send(pcmBuffer);\n        }\n      };\n      \n      // Connect the audio processing chain\n      source.connect(this.processor);\n      this.processor.connect(this.audioContext.destination);\n      \n      console.log('üî¥ AudioWorklet processing started');\n      this.notifyListeners({ type: 'status', data: 'Recording with AudioWorklet... üî¥' });\n      \n    } catch (error) {\n      console.error('‚ùå Failed to setup AudioWorklet:', error);\n      // Fallback to ScriptProcessorNode if AudioWorklet fails\n      this.setupFallbackAudioProcessing();\n    }\n  }\n\n  setupFallbackAudioProcessing() {\n    console.log('‚ö†Ô∏è Falling back to ScriptProcessorNode (deprecated)');\n    \n    // Create source node from microphone stream\n    const source = this.audioContext.createMediaStreamSource(this.mediaStream);\n    \n    // Create ScriptProcessorNode for raw audio data\n    const bufferSize = 4096;\n    this.processor = this.audioContext.createScriptProcessor(bufferSize, 1, 1);\n    \n    this.processor.onaudioprocess = (event) => {\n      if (this.signalingSocket?.readyState === WebSocket.OPEN) {\n        const inputBuffer = event.inputBuffer;\n        const inputData = inputBuffer.getChannelData(0); // Get mono channel\n        \n        // Convert Float32Array to Int16Array (PCM 16-bit)\n        const pcmData = new Int16Array(inputData.length);\n        for (let i = 0; i < inputData.length; i++) {\n          // Convert from -1.0 to 1.0 range to -32768 to 32767 range\n          const sample = Math.max(-1, Math.min(1, inputData[i]));\n          pcmData[i] = sample < 0 ? sample * 0x8000 : sample * 0x7FFF;\n        }\n        \n        // Send raw PCM data\n        console.log('üéµ Sending PCM audio chunk (fallback):', pcmData.length, 'samples');\n        this.signalingSocket.send(pcmData.buffer);\n      }\n    };\n    \n    // Connect the audio processing chain\n    source.connect(this.processor);\n    this.processor.connect(this.audioContext.destination);\n    \n    console.log('üî¥ Fallback audio processing started');\n    this.notifyListeners({ type: 'status', data: 'Recording (fallback mode)... üî¥' });\n  }\n\n  stopAudioStreaming() {\n    console.log('üõë Stopping WebRTC audio streaming...');\n    this.isStreaming = false;\n\n    // Stop audio processing\n    if (this.processor) {\n      this.processor.disconnect();\n      \n      // Clean up AudioWorkletNode port if it exists\n      if (this.processor.port) {\n        this.processor.port.onmessage = null;\n      }\n      \n      this.processor = null;\n    }\n\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n\n    // Close WebSocket\n    if (this.signalingSocket) {\n      this.signalingSocket.close();\n      this.signalingSocket = null;\n    }\n\n    // Stop media stream\n    if (this.mediaStream) {\n      this.mediaStream.getTracks().forEach(track => track.stop());\n      this.mediaStream = null;\n    }\n\n    this.notifyListeners({ type: 'status', data: 'Stopped ‚èπÔ∏è' });\n    console.log('‚úÖ WebRTC audio streaming stopped');\n  }\n\n  // Force cleanup - useful for debugging\n  forceCleanup() {\n    console.log('üî• Force cleanup: clearing all listeners and stopping streaming');\n    this.listeners.clear();\n    this.stopAudioStreaming();\n  }\n}\n\n// Create singleton instance\nconst webRTCService = new WebRTCService();\n\n// Make it available globally for debugging\nif (typeof window !== 'undefined') {\n  window.webRTCService = webRTCService;\n  console.log('üîß WebRTCService available globally as window.webRTCService');\n}\n\nexport default webRTCService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}