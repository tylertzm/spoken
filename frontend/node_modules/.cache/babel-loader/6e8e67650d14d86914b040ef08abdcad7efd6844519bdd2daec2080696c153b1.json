{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/spoken/frontend/src/components/TaskDisplay/TaskDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskDisplay() {\n  _s();\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function getWeather() {\n      setLoading(true);\n      setError(null);\n      try {\n        const res = await fetch('http://localhost:8000/gemma-python', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            prompt: 'how is the weather today?'\n          })\n        });\n        if (!res.ok) throw new Error('Failed to fetch Gemma response');\n        const data = await res.json();\n        setResponse(data.response || 'No response');\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getWeather();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      minHeight: 48,\n      borderRadius: 12,\n      border: '1.5px solid rgba(255,255,255,0.25)',\n      background: 'rgba(255,255,255,0.10)',\n      boxShadow: '0 4px 24px 0 rgba(0,0,0,0.10)',\n      backdropFilter: 'blur(12px)',\n      WebkitBackdropFilter: 'blur(12px)',\n      padding: '16px 20px',\n      color: '#fff',\n      fontSize: 18,\n      fontFamily: 'inherit',\n      outline: 'none',\n      margin: '0 auto',\n      marginTop: 8,\n      marginBottom: 8,\n      display: 'flex',\n      alignItems: 'center',\n      transition: 'box-shadow 0.2s'\n    },\n    children: loading ? /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        opacity: 0.7\n      },\n      children: \"Loading weather from Gemma...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: '#ff6b6b',\n        opacity: 0.9\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        opacity: 0.95\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Gemma says:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 41\n      }, this), \" \", response]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskDisplay, \"Aykr0VyC4UkD0SefdH1IwEreAJY=\");\n_c = TaskDisplay;\nexport default TaskDisplay;\nvar _c;\n$RefreshReg$(_c, \"TaskDisplay\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TaskDisplay","_s","response","setResponse","loading","setLoading","error","setError","getWeather","res","fetch","method","headers","body","JSON","stringify","prompt","ok","Error","data","json","err","message","style","width","minHeight","borderRadius","border","background","boxShadow","backdropFilter","WebkitBackdropFilter","padding","color","fontSize","fontFamily","outline","margin","marginTop","marginBottom","display","alignItems","transition","children","opacity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/spoken/frontend/src/components/TaskDisplay/TaskDisplay.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction TaskDisplay() {\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getWeather() {\n      setLoading(true);\n      setError(null);\n      try {\n        const res = await fetch('http://localhost:8000/gemma-python', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ prompt: 'how is the weather today?' })\n        });\n        if (!res.ok) throw new Error('Failed to fetch Gemma response');\n        const data = await res.json();\n        setResponse(data.response || 'No response');\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getWeather();\n  }, []);\n\n  return (\n    <div\n      style={{\n        width: '100%',\n        minHeight: 48,\n        borderRadius: 12,\n        border: '1.5px solid rgba(255,255,255,0.25)',\n        background: 'rgba(255,255,255,0.10)',\n        boxShadow: '0 4px 24px 0 rgba(0,0,0,0.10)',\n        backdropFilter: 'blur(12px)',\n        WebkitBackdropFilter: 'blur(12px)',\n        padding: '16px 20px',\n        color: '#fff',\n        fontSize: 18,\n        fontFamily: 'inherit',\n        outline: 'none',\n        margin: '0 auto',\n        marginTop: 8,\n        marginBottom: 8,\n        display: 'flex',\n        alignItems: 'center',\n        transition: 'box-shadow 0.2s',\n      }}\n    >\n      {loading ? (\n        <span style={{ opacity: 0.7 }}>Loading weather from Gemma...</span>\n      ) : error ? (\n        <span style={{ color: '#ff6b6b', opacity: 0.9 }}>Error: {error}</span>\n      ) : (\n        <span style={{ opacity: 0.95 }}><strong>Gemma says:</strong> {response}</span>\n      )}\n    </div>\n  );\n}\n\nexport default TaskDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}