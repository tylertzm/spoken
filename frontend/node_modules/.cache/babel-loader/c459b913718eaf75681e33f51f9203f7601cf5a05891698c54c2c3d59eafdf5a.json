{"ast":null,"code":"// WebSocketService.js - Singleton WebSocket connection\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.connected = false;\n    this.listeners = new Set();\n    this.retryInterval = 1000;\n    this.retryTimeout = null;\n\n    // Cleanup on page unload\n    window.addEventListener('beforeunload', () => {\n      console.log('üö™ Page unloading, disconnecting WebSocket');\n      this.disconnect();\n    });\n\n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        console.log('üì¥ Page hidden, maintaining connection');\n      } else {\n        console.log('üëÅÔ∏è Page visible, checking connection');\n        if (!this.connected && this.listeners.size > 0) {\n          this.connect();\n        }\n      }\n    });\n  }\n  addListener(callback) {\n    this.listeners.add(callback);\n\n    // If already connected, immediately call the callback with current status\n    if (this.connected) {\n      callback({\n        type: 'status',\n        data: 'Connected ‚úÖ'\n      });\n    }\n  }\n  removeListener(callback) {\n    this.listeners.delete(callback);\n  }\n  notifyListeners(message) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(message);\n      } catch (error) {\n        console.error('Error in WebSocket listener:', error);\n      }\n    });\n  }\n  connect() {\n    if (this.connected) {\n      console.log('‚úÖ WebSocket already connected, skipping');\n      return;\n    }\n\n    // Always cleanup any existing connection first\n    if (this.ws) {\n      console.log('‚ö†Ô∏è Cleaning up existing WebSocket before creating new one');\n      this.disconnect();\n    }\n    console.log('üîå Creating WebSocket connection...');\n    try {\n      this.ws = new WebSocket('ws://localhost:8000/ws');\n      this.ws.onopen = () => {\n        console.log('‚úÖ WebSocket connected successfully');\n        this.connected = true;\n        this.retryInterval = 1000; // reset retry interval\n        this.notifyListeners({\n          type: 'status',\n          data: 'Connected ‚úÖ'\n        });\n      };\n      this.ws.onmessage = event => {\n        const transcription = event.data;\n        console.log('üì• Received transcription:', transcription);\n        this.notifyListeners({\n          type: 'transcription',\n          data: transcription\n        });\n      };\n      this.ws.onclose = event => {\n        console.log('‚ùå WebSocket disconnected. Code:', event.code, 'Reason:', event.reason);\n        this.connected = false;\n        this.ws = null;\n        this.notifyListeners({\n          type: 'status',\n          data: 'Disconnected ‚ùå'\n        });\n\n        // Only retry on abnormal closure and if we have active listeners\n        if (event.code !== 1000 && this.listeners.size > 0) {\n          console.log('üîÑ Will retry connection in', this.retryInterval, 'ms');\n          this.notifyListeners({\n            type: 'status',\n            data: 'Reconnecting...'\n          });\n          this.retryTimeout = setTimeout(() => {\n            this.connect();\n          }, this.retryInterval);\n          this.retryInterval = Math.min(this.retryInterval * 2, 30000);\n        }\n      };\n      this.ws.onerror = error => {\n        console.error('‚ùå WebSocket error:', error);\n        this.notifyListeners({\n          type: 'status',\n          data: 'Error ‚ùå'\n        });\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to create WebSocket:', error);\n      this.notifyListeners({\n        type: 'status',\n        data: 'Failed ‚ùå'\n      });\n    }\n  }\n  disconnect() {\n    console.log('üßπ Disconnecting WebSocket...');\n\n    // Clear any pending retry\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout);\n      this.retryTimeout = null;\n    }\n\n    // Close the WebSocket connection\n    if (this.ws) {\n      this.connected = false;\n\n      // Remove event handlers to prevent any callbacks\n      this.ws.onopen = null;\n      this.ws.onmessage = null;\n      this.ws.onclose = null;\n      this.ws.onerror = null;\n\n      // Close the connection\n      if (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING) {\n        this.ws.close(1000, 'Manual disconnect');\n      }\n      this.ws = null;\n    }\n    console.log('‚úÖ WebSocket disconnected and cleaned up');\n  }\n\n  // Force cleanup - useful for debugging\n  forceCleanup() {\n    console.log('üî• Force cleanup: clearing all listeners and disconnecting');\n    this.listeners.clear();\n    this.disconnect();\n  }\n}\n\n// Create singleton instance\nconst webSocketService = new WebSocketService();\n\n// Make it available globally for debugging\nif (typeof window !== 'undefined') {\n  window.webSocketService = webSocketService;\n  console.log('üîß WebSocketService available globally as window.webSocketService');\n}\nexport default webSocketService;","map":{"version":3,"names":["WebSocketService","constructor","ws","connected","listeners","Set","retryInterval","retryTimeout","window","addEventListener","console","log","disconnect","document","hidden","size","connect","addListener","callback","add","type","data","removeListener","delete","notifyListeners","message","forEach","error","WebSocket","onopen","onmessage","event","transcription","onclose","code","reason","setTimeout","Math","min","onerror","clearTimeout","readyState","OPEN","CONNECTING","close","forceCleanup","clear","webSocketService"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/WebSocketService.js"],"sourcesContent":["// WebSocketService.js - Singleton WebSocket connection\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.connected = false;\n    this.listeners = new Set();\n    this.retryInterval = 1000;\n    this.retryTimeout = null;\n    \n    // Cleanup on page unload\n    window.addEventListener('beforeunload', () => {\n      console.log('üö™ Page unloading, disconnecting WebSocket');\n      this.disconnect();\n    });\n    \n    // Handle page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        console.log('üì¥ Page hidden, maintaining connection');\n      } else {\n        console.log('üëÅÔ∏è Page visible, checking connection');\n        if (!this.connected && this.listeners.size > 0) {\n          this.connect();\n        }\n      }\n    });\n  }\n\n  addListener(callback) {\n    this.listeners.add(callback);\n    \n    // If already connected, immediately call the callback with current status\n    if (this.connected) {\n      callback({ type: 'status', data: 'Connected ‚úÖ' });\n    }\n  }\n\n  removeListener(callback) {\n    this.listeners.delete(callback);\n  }\n\n  notifyListeners(message) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(message);\n      } catch (error) {\n        console.error('Error in WebSocket listener:', error);\n      }\n    });\n  }\n\n  connect() {\n    if (this.connected) {\n      console.log('‚úÖ WebSocket already connected, skipping');\n      return;\n    }\n    \n    // Always cleanup any existing connection first\n    if (this.ws) {\n      console.log('‚ö†Ô∏è Cleaning up existing WebSocket before creating new one');\n      this.disconnect();\n    }\n\n    console.log('üîå Creating WebSocket connection...');\n    \n    try {\n      this.ws = new WebSocket('ws://localhost:8000/ws');\n      \n      this.ws.onopen = () => {\n        console.log('‚úÖ WebSocket connected successfully');\n        this.connected = true;\n        this.retryInterval = 1000; // reset retry interval\n        this.notifyListeners({ type: 'status', data: 'Connected ‚úÖ' });\n      };\n\n      this.ws.onmessage = (event) => {\n        const transcription = event.data;\n        console.log('üì• Received transcription:', transcription);\n        this.notifyListeners({ type: 'transcription', data: transcription });\n      };\n\n      this.ws.onclose = (event) => {\n        console.log('‚ùå WebSocket disconnected. Code:', event.code, 'Reason:', event.reason);\n        this.connected = false;\n        this.ws = null;\n        this.notifyListeners({ type: 'status', data: 'Disconnected ‚ùå' });\n        \n        // Only retry on abnormal closure and if we have active listeners\n        if (event.code !== 1000 && this.listeners.size > 0) {\n          console.log('üîÑ Will retry connection in', this.retryInterval, 'ms');\n          this.notifyListeners({ type: 'status', data: 'Reconnecting...' });\n          this.retryTimeout = setTimeout(() => {\n            this.connect();\n          }, this.retryInterval);\n          this.retryInterval = Math.min(this.retryInterval * 2, 30000);\n        }\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('‚ùå WebSocket error:', error);\n        this.notifyListeners({ type: 'status', data: 'Error ‚ùå' });\n      };\n      \n    } catch (error) {\n      console.error('‚ùå Failed to create WebSocket:', error);\n      this.notifyListeners({ type: 'status', data: 'Failed ‚ùå' });\n    }\n  }\n\n  disconnect() {\n    console.log('üßπ Disconnecting WebSocket...');\n    \n    // Clear any pending retry\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout);\n      this.retryTimeout = null;\n    }\n    \n    // Close the WebSocket connection\n    if (this.ws) {\n      this.connected = false;\n      \n      // Remove event handlers to prevent any callbacks\n      this.ws.onopen = null;\n      this.ws.onmessage = null;\n      this.ws.onclose = null;\n      this.ws.onerror = null;\n      \n      // Close the connection\n      if (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING) {\n        this.ws.close(1000, 'Manual disconnect');\n      }\n      \n      this.ws = null;\n    }\n    \n    console.log('‚úÖ WebSocket disconnected and cleaned up');\n  }\n\n  // Force cleanup - useful for debugging\n  forceCleanup() {\n    console.log('üî• Force cleanup: clearing all listeners and disconnecting');\n    this.listeners.clear();\n    this.disconnect();\n  }\n}\n\n// Create singleton instance\nconst webSocketService = new WebSocketService();\n\n// Make it available globally for debugging\nif (typeof window !== 'undefined') {\n  window.webSocketService = webSocketService;\n  console.log('üîß WebSocketService available globally as window.webSocketService');\n}\n\nexport default webSocketService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}