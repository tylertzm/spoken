{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/spoken/frontend/src/components/TaskDisplay/TaskDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchGemmaWeather } from './TaskDisplay.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskDisplay() {\n  _s();\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function getWeather() {\n      setLoading(true);\n      setError(null);\n      const {\n        response,\n        error\n      } = await fetchGemmaWeather();\n      setResponse(response);\n      setError(error);\n      setLoading(false);\n    }\n    getWeather();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading weather from Gemma...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: 'red'\n    },\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n      children: \"Gemma says:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 15\n    }, this), \" \", response]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n}\n_s(TaskDisplay, \"Aykr0VyC4UkD0SefdH1IwEreAJY=\");\n_c = TaskDisplay;\nexport default TaskDisplay;\nvar _c;\n$RefreshReg$(_c, \"TaskDisplay\");","map":{"version":3,"names":["React","useEffect","useState","fetchGemmaWeather","jsxDEV","_jsxDEV","TaskDisplay","_s","response","setResponse","loading","setLoading","error","setError","getWeather","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/spoken/frontend/src/components/TaskDisplay/TaskDisplay.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { fetchGemmaWeather } from './TaskDisplay.js';\n\nfunction TaskDisplay() {\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getWeather() {\n      setLoading(true);\n      setError(null);\n      const { response, error } = await fetchGemmaWeather();\n      setResponse(response);\n      setError(error);\n      setLoading(false);\n    }\n    getWeather();\n  }, []);\n\n  if (loading) return <div>Loading weather from Gemma...</div>;\n  if (error) return <div style={{ color: 'red' }}>Error: {error}</div>;\n  return <div><strong>Gemma says:</strong> {response}</div>;\n}\n\nexport default TaskDisplay;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,iBAAiB,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,eAAea,UAAUA,CAAA,EAAG;MAC1BH,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAM;QAAEL,QAAQ;QAAEI;MAAM,CAAC,GAAG,MAAMT,iBAAiB,CAAC,CAAC;MACrDM,WAAW,CAACD,QAAQ,CAAC;MACrBK,QAAQ,CAACD,KAAK,CAAC;MACfD,UAAU,CAAC,KAAK,CAAC;IACnB;IACAG,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE,oBAAOL,OAAA;IAAAU,QAAA,EAAK;EAA6B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EAC5D,IAAIP,KAAK,EAAE,oBAAOP,OAAA;IAAKe,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAE;IAAAN,QAAA,GAAC,SAAO,EAACH,KAAK;EAAA;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EACpE,oBAAOd,OAAA;IAAAU,QAAA,gBAAKV,OAAA;MAAAU,QAAA,EAAQ;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,KAAC,EAACX,QAAQ;EAAA;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAC3D;AAACZ,EAAA,CApBQD,WAAW;AAAAgB,EAAA,GAAXhB,WAAW;AAsBpB,eAAeA,WAAW;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}