{"ast":null,"code":"// PollingService.js - Alternative to WebSocket using HTTP polling\nclass PollingService {\n  constructor() {\n    this.listeners = new Set();\n    this.polling = false;\n    this.pollInterval = null;\n  }\n  addListener(callback) {\n    this.listeners.add(callback);\n\n    // Start polling when first listener is added\n    if (this.listeners.size === 1 && !this.polling) {\n      this.startPolling();\n    }\n  }\n  removeListener(callback) {\n    this.listeners.delete(callback);\n\n    // Stop polling when no listeners remain\n    if (this.listeners.size === 0) {\n      this.stopPolling();\n    }\n  }\n  notifyListeners(message) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(message);\n      } catch (error) {\n        console.error('Error in polling listener:', error);\n      }\n    });\n  }\n  async startPolling() {\n    if (this.polling) return;\n    console.log('üîÑ Starting transcription polling...');\n    this.polling = true;\n    this.notifyListeners({\n      type: 'status',\n      data: 'Connected ‚úÖ'\n    });\n    const poll = async () => {\n      if (!this.polling) return;\n      try {\n        const response = await fetch('http://localhost:8000/');\n        const data = await response.json();\n\n        // Only process non-empty transcriptions\n        if (data.text && data.text.trim()) {\n          console.log('üì• Received new transcription:', data.text);\n          this.notifyListeners({\n            type: 'transcription',\n            data: data.text\n          });\n        }\n      } catch (error) {\n        console.error('‚ùå Polling error:', error);\n        this.notifyListeners({\n          type: 'status',\n          data: 'Error ‚ùå'\n        });\n      }\n\n      // Poll every 100ms for near real-time updates\n      if (this.polling) {\n        this.pollInterval = setTimeout(poll, 100);\n      }\n    };\n    poll();\n  }\n  stopPolling() {\n    console.log('üõë Stopping transcription polling...');\n    this.polling = false;\n    if (this.pollInterval) {\n      clearTimeout(this.pollInterval);\n      this.pollInterval = null;\n    }\n    this.notifyListeners({\n      type: 'status',\n      data: 'Disconnected ‚ùå'\n    });\n  }\n\n  // Force cleanup - useful for debugging\n  forceCleanup() {\n    console.log('üî• Force cleanup: clearing all listeners and stopping polling');\n    this.listeners.clear();\n    this.stopPolling();\n  }\n}\n\n// Create singleton instance\nconst pollingService = new PollingService();\n\n// Make it available globally for debugging\nif (typeof window !== 'undefined') {\n  window.pollingService = pollingService;\n  console.log('üîß PollingService available globally as window.pollingService');\n}\nexport default pollingService;","map":{"version":3,"names":["PollingService","constructor","listeners","Set","polling","pollInterval","addListener","callback","add","size","startPolling","removeListener","delete","stopPolling","notifyListeners","message","forEach","error","console","log","type","data","poll","response","fetch","json","text","trim","setTimeout","clearTimeout","forceCleanup","clear","pollingService","window"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/PollingService.js"],"sourcesContent":["// PollingService.js - Alternative to WebSocket using HTTP polling\nclass PollingService {\n  constructor() {\n    this.listeners = new Set();\n    this.polling = false;\n    this.pollInterval = null;\n  }\n\n  addListener(callback) {\n    this.listeners.add(callback);\n    \n    // Start polling when first listener is added\n    if (this.listeners.size === 1 && !this.polling) {\n      this.startPolling();\n    }\n  }\n\n  removeListener(callback) {\n    this.listeners.delete(callback);\n    \n    // Stop polling when no listeners remain\n    if (this.listeners.size === 0) {\n      this.stopPolling();\n    }\n  }\n\n  notifyListeners(message) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(message);\n      } catch (error) {\n        console.error('Error in polling listener:', error);\n      }\n    });\n  }\n\n  async startPolling() {\n    if (this.polling) return;\n    \n    console.log('üîÑ Starting transcription polling...');\n    this.polling = true;\n    \n    this.notifyListeners({ type: 'status', data: 'Connected ‚úÖ' });\n    \n    const poll = async () => {\n      if (!this.polling) return;\n      \n      try {\n        const response = await fetch('http://localhost:8000/');\n        const data = await response.json();\n        \n        // Only process non-empty transcriptions\n        if (data.text && data.text.trim()) {\n          console.log('üì• Received new transcription:', data.text);\n          this.notifyListeners({ type: 'transcription', data: data.text });\n        }\n      } catch (error) {\n        console.error('‚ùå Polling error:', error);\n        this.notifyListeners({ type: 'status', data: 'Error ‚ùå' });\n      }\n      \n      // Poll every 100ms for near real-time updates\n      if (this.polling) {\n        this.pollInterval = setTimeout(poll, 100);\n      }\n    };\n    \n    poll();\n  }\n\n  stopPolling() {\n    console.log('üõë Stopping transcription polling...');\n    this.polling = false;\n    \n    if (this.pollInterval) {\n      clearTimeout(this.pollInterval);\n      this.pollInterval = null;\n    }\n    \n    this.notifyListeners({ type: 'status', data: 'Disconnected ‚ùå' });\n  }\n\n  // Force cleanup - useful for debugging\n  forceCleanup() {\n    console.log('üî• Force cleanup: clearing all listeners and stopping polling');\n    this.listeners.clear();\n    this.stopPolling();\n  }\n}\n\n// Create singleton instance\nconst pollingService = new PollingService();\n\n// Make it available globally for debugging\nif (typeof window !== 'undefined') {\n  window.pollingService = pollingService;\n  console.log('üîß PollingService available globally as window.pollingService');\n}\n\nexport default pollingService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}