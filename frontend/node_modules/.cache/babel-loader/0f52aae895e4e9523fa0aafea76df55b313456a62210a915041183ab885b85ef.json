{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/SpeakNow/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport TranscriptionDisplay from './TranscriptionDisplay';\nimport pollingService from './PollingService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [allTranscriptions, setAllTranscriptions] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('Connecting...');\n  useEffect(() => {\n    const componentId = Math.random().toString(36).substring(2, 11);\n    console.log('ðŸŽ¯ App component mounted with ID:', componentId, 'setting up polling listener');\n    const handlePollingMessage = message => {\n      console.log('ðŸ“¨ Component', componentId, 'received message:', message);\n      if (message.type === 'status') {\n        setConnectionStatus(message.data);\n      } else if (message.type === 'transcription') {\n        setTranscription(message.data);\n        setAllTranscriptions(prev => [message.data, ...prev]);\n      }\n    };\n\n    // Add listener - polling will start automatically\n    pollingService.addListener(handlePollingMessage);\n    return () => {\n      console.log('ðŸ§¹ App component', componentId, 'unmounting, removing polling listener');\n      pollingService.removeListener(handlePollingMessage);\n      // Polling will stop automatically when no listeners remain\n    };\n  }, []); // Empty dependency array - only run once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '100px',\n          right: '20px',\n          fontSize: '14px',\n          padding: '5px 10px',\n          background: 'rgba(0,0,0,0.1)',\n          borderRadius: '5px'\n        },\n        children: [\"Polling: \", connectionStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TranscriptionDisplay, {\n        transcription: transcription,\n        allTranscriptions: allTranscriptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+HGB6fbCwCe1srMg6akBOBTAoik=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TranscriptionDisplay","pollingService","jsxDEV","_jsxDEV","App","_s","transcription","setTranscription","allTranscriptions","setAllTranscriptions","connectionStatus","setConnectionStatus","componentId","Math","random","toString","substring","console","log","handlePollingMessage","message","type","data","prev","addListener","removeListener","className","children","style","position","top","right","fontSize","padding","background","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport TranscriptionDisplay from './TranscriptionDisplay';\nimport pollingService from './PollingService';\n\nfunction App() {\n  const [transcription, setTranscription] = useState('');\n  const [allTranscriptions, setAllTranscriptions] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('Connecting...');\n\n  useEffect(() => {\n    const componentId = Math.random().toString(36).substring(2, 11);\n    console.log('ðŸŽ¯ App component mounted with ID:', componentId, 'setting up polling listener');\n    \n    const handlePollingMessage = (message) => {\n      console.log('ðŸ“¨ Component', componentId, 'received message:', message);\n      if (message.type === 'status') {\n        setConnectionStatus(message.data);\n      } else if (message.type === 'transcription') {\n        setTranscription(message.data);\n        setAllTranscriptions(prev => [message.data, ...prev]);\n      }\n    };\n\n    // Add listener - polling will start automatically\n    pollingService.addListener(handlePollingMessage);\n\n    return () => {\n      console.log('ðŸ§¹ App component', componentId, 'unmounting, removing polling listener');\n      pollingService.removeListener(handlePollingMessage);\n      // Polling will stop automatically when no listeners remain\n    };\n  }, []); // Empty dependency array - only run once\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{ position: 'absolute', top: '100px', right: '20px', fontSize: '14px', padding: '5px 10px', background: 'rgba(0,0,0,0.1)', borderRadius: '5px' }}>\n          Polling: {connectionStatus}\n        </div>\n        <TranscriptionDisplay\n          transcription={transcription}\n          allTranscriptions={allTranscriptions}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AACrB,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACU,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,eAAe,CAAC;EAEzEC,SAAS,CAAC,MAAM;IACd,MAAMa,WAAW,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IAC/DC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEN,WAAW,EAAE,6BAA6B,CAAC;IAE5F,MAAMO,oBAAoB,GAAIC,OAAO,IAAK;MACxCH,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEN,WAAW,EAAE,mBAAmB,EAAEQ,OAAO,CAAC;MACtE,IAAIA,OAAO,CAACC,IAAI,KAAK,QAAQ,EAAE;QAC7BV,mBAAmB,CAACS,OAAO,CAACE,IAAI,CAAC;MACnC,CAAC,MAAM,IAAIF,OAAO,CAACC,IAAI,KAAK,eAAe,EAAE;QAC3Cd,gBAAgB,CAACa,OAAO,CAACE,IAAI,CAAC;QAC9Bb,oBAAoB,CAACc,IAAI,IAAI,CAACH,OAAO,CAACE,IAAI,EAAE,GAAGC,IAAI,CAAC,CAAC;MACvD;IACF,CAAC;;IAED;IACAtB,cAAc,CAACuB,WAAW,CAACL,oBAAoB,CAAC;IAEhD,OAAO,MAAM;MACXF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,WAAW,EAAE,uCAAuC,CAAC;MACrFX,cAAc,CAACwB,cAAc,CAACN,oBAAoB,CAAC;MACnD;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEhB,OAAA;IAAKuB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBxB,OAAA;MAAQuB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BxB,OAAA;QAAKyB,KAAK,EAAE;UAAEC,QAAQ,EAAE,UAAU;UAAEC,GAAG,EAAE,OAAO;UAAEC,KAAK,EAAE,MAAM;UAAEC,QAAQ,EAAE,MAAM;UAAEC,OAAO,EAAE,UAAU;UAAEC,UAAU,EAAE,iBAAiB;UAAEC,YAAY,EAAE;QAAM,CAAE;QAAAR,QAAA,GAAC,WACnJ,EAACjB,gBAAgB;MAAA;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC,eACNpC,OAAA,CAACH,oBAAoB;QACnBM,aAAa,EAAEA,aAAc;QAC7BE,iBAAiB,EAAEA;MAAkB;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAAClC,EAAA,CA1CQD,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}