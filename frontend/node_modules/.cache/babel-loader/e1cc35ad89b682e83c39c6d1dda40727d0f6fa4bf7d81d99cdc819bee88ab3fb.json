{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/SpeakNow/frontend/src/TranscriptionDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TranscriptionDisplay({\n  transcription,\n  allTranscriptions,\n  connectionStatus\n}) {\n  _s();\n  const [selectedLanguage] = useState('en');\n  const [rmsThreshold, setRmsThreshold] = useState(100);\n  const liveTextRef = useRef(null);\n\n  // Auto-resize text to fit container\n  useEffect(() => {\n    const adjustFontSize = () => {\n      const textElement = liveTextRef.current;\n      if (!textElement) return;\n      const container = textElement.parentElement;\n      if (!container) return;\n\n      // Reset font size to default first\n      textElement.style.fontSize = '';\n\n      // Get the computed styles\n      const containerHeight = container.clientHeight - 40; // Account for padding\n      const containerWidth = container.clientWidth - 40; // Account for padding\n\n      // Check if text overflows\n      let fontSize = parseFloat(window.getComputedStyle(textElement).fontSize);\n      const maxFontSize = fontSize; // Store original size as max\n\n      // Reduce font size until text fits\n      while ((textElement.scrollHeight > containerHeight || textElement.scrollWidth > containerWidth) && fontSize > 12) {\n        fontSize -= 2;\n        textElement.style.fontSize = `${fontSize}px`;\n      }\n\n      // Don't exceed the maximum font size\n      if (fontSize > maxFontSize) {\n        textElement.style.fontSize = `${maxFontSize}px`;\n      }\n    };\n\n    // Adjust on text change\n    if (transcription) {\n      adjustFontSize();\n    }\n\n    // Adjust on window resize\n    window.addEventListener('resize', adjustFontSize);\n    return () => window.removeEventListener('resize', adjustFontSize);\n  }, [transcription]);\n\n  // Debug logging\n  console.log('ðŸŽ¯ TranscriptionDisplay rendered with:', {\n    transcription,\n    allTranscriptions,\n    connectionStatus\n  });\n\n  // Function to determine status class for styling\n  const getStatusClass = status => {\n    if (status.includes('Connected') || status.includes('Recording')) {\n      return 'status-connected';\n    } else if (status.includes('Starting') || status.includes('Connecting')) {\n      return 'status-connecting';\n    } else if (status.includes('Error') || status.includes('Disconnected')) {\n      return 'status-error';\n    }\n    return 'status-default';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transcription-absolute-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-cell\",\n        style: {\n          gridColumn: '1 / span 2'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"language-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"language-dropdown\",\n              value: selectedLanguage,\n              disabled: true,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"en\",\n                children: \"English\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"yue\",\n                children: \"Cantonese\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"de\",\n                children: \"German\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"zh\",\n                children: \"Mandarin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                marginLeft: 8,\n                color: '#888',\n                fontSize: 12\n              },\n              children: \"More Languages Coming Soon!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connection-status\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `status-indicator ${getStatusClass(connectionStatus)}`,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"status-dot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"status-text\",\n                children: connectionStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-cell transcription-cell\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transcription-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            ref: liveTextRef,\n            className: \"live-text\",\n            children: transcription || 'Waiting for speech...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              color: '#666',\n              marginTop: '10px'\n            },\n            children: [\"Debug: \\\"\", transcription, \"\\\" | Length: \", (transcription === null || transcription === void 0 ? void 0 : transcription.length) || 0]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-cell history-cell\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"history-display\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"history-log\",\n            children: allTranscriptions.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: '#888',\n                fontStyle: 'italic'\n              },\n              children: \"History currently unavailable\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this) : allTranscriptions.map((text, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n              children: text\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(TranscriptionDisplay, \"nsBpKqjpzZgrAd71+LsZNYyzEuA=\");\n_c = TranscriptionDisplay;\nexport default TranscriptionDisplay;\nvar _c;\n$RefreshReg$(_c, \"TranscriptionDisplay\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","TranscriptionDisplay","transcription","allTranscriptions","connectionStatus","_s","selectedLanguage","rmsThreshold","setRmsThreshold","liveTextRef","adjustFontSize","textElement","current","container","parentElement","style","fontSize","containerHeight","clientHeight","containerWidth","clientWidth","parseFloat","window","getComputedStyle","maxFontSize","scrollHeight","scrollWidth","addEventListener","removeEventListener","console","log","getStatusClass","status","includes","className","children","gridColumn","value","disabled","fileName","_jsxFileName","lineNumber","columnNumber","marginLeft","color","ref","marginTop","length","fontStyle","map","text","index","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/TranscriptionDisplay.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nfunction TranscriptionDisplay({ transcription, allTranscriptions, connectionStatus }) {\n  const [selectedLanguage] = useState('en');\n  const [rmsThreshold, setRmsThreshold] = useState(100);\n  const liveTextRef = useRef(null);\n\n  // Auto-resize text to fit container\n  useEffect(() => {\n    const adjustFontSize = () => {\n      const textElement = liveTextRef.current;\n      if (!textElement) return;\n\n      const container = textElement.parentElement;\n      if (!container) return;\n\n      // Reset font size to default first\n      textElement.style.fontSize = '';\n      \n      // Get the computed styles\n      const containerHeight = container.clientHeight - 40; // Account for padding\n      const containerWidth = container.clientWidth - 40; // Account for padding\n      \n      // Check if text overflows\n      let fontSize = parseFloat(window.getComputedStyle(textElement).fontSize);\n      const maxFontSize = fontSize; // Store original size as max\n      \n      // Reduce font size until text fits\n      while ((textElement.scrollHeight > containerHeight || textElement.scrollWidth > containerWidth) && fontSize > 12) {\n        fontSize -= 2;\n        textElement.style.fontSize = `${fontSize}px`;\n      }\n      \n      // Don't exceed the maximum font size\n      if (fontSize > maxFontSize) {\n        textElement.style.fontSize = `${maxFontSize}px`;\n      }\n    };\n\n    // Adjust on text change\n    if (transcription) {\n      adjustFontSize();\n    }\n\n    // Adjust on window resize\n    window.addEventListener('resize', adjustFontSize);\n    return () => window.removeEventListener('resize', adjustFontSize);\n  }, [transcription]);\n\n  // Debug logging\n  console.log('ðŸŽ¯ TranscriptionDisplay rendered with:', { transcription, allTranscriptions, connectionStatus });\n\n  // Function to determine status class for styling\n  const getStatusClass = (status) => {\n    if (status.includes('Connected') || status.includes('Recording')) {\n      return 'status-connected';\n    } else if (status.includes('Starting') || status.includes('Connecting')) {\n      return 'status-connecting';\n    } else if (status.includes('Error') || status.includes('Disconnected')) {\n      return 'status-error';\n    }\n    return 'status-default';\n  };\n\n  return (\n    <div className=\"transcription-absolute-table\">\n      <div className=\"table-row\">\n        <div className=\"table-cell\" style={{ gridColumn: '1 / span 2' }}>\n          <div className=\"control-bar\">\n            <div className=\"language-selector\">\n              <select className='language-dropdown' value={selectedLanguage} disabled>\n                <option value=\"en\">English</option>\n                <option value=\"yue\">Cantonese</option>\n                <option value=\"de\">German</option>\n                <option value=\"zh\">Mandarin</option>\n              </select>\n              <span style={{ marginLeft: 8, color: '#888', fontSize: 12 }}>\n                More Languages Coming Soon!\n              </span>\n            </div>\n            <div className=\"connection-status\">\n              <div className={`status-indicator ${getStatusClass(connectionStatus)}`}>\n                <div className=\"status-dot\"></div>\n                <span className=\"status-text\">{connectionStatus}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"table-row\">\n        <div className=\"table-cell transcription-cell\">\n          <div className=\"transcription-display\">\n            <p ref={liveTextRef} className=\"live-text\">\n              {transcription || 'Waiting for speech...'}\n            </p>\n            <div style={{ fontSize: '12px', color: '#666', marginTop: '10px' }}>\n              Debug: \"{transcription}\" | Length: {transcription?.length || 0}\n            </div>\n          </div>\n        </div>\n        <div className=\"table-cell history-cell\">\n          <div className=\"history-display\">\n            <div className=\"history-log\">\n              {allTranscriptions.length === 0 ? (\n                <p style={{ color: '#888', fontStyle: 'italic' }}>\n                  History currently unavailable\n                </p>\n              ) : (\n                allTranscriptions.map((text, index) => (\n                  <p key={index}>{text}</p>\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TranscriptionDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}