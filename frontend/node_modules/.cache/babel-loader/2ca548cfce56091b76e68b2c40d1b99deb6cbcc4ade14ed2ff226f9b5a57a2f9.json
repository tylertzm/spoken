{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/SpeakNow/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport TranscriptionDisplay from './TranscriptionDisplay';\nimport webRTCService from './WebRTCService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [transcription, setTranscription] = useState('');\n  const [allTranscriptions, setAllTranscriptions] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('Connecting...');\n  const [clearTranscriptionTimer, setClearTranscriptionTimer] = useState(null);\n  useEffect(() => {\n    const componentId = Math.random().toString(36).substring(2, 11);\n    console.log('ðŸŽ¯ App component mounted with ID:', componentId, 'setting up WebRTC listener');\n    const handleWebRTCMessage = message => {\n      console.log('ðŸ“¨ Component', componentId, 'received WebRTC message:', message);\n      if (message.type === 'status') {\n        setConnectionStatus(message.data);\n      } else if (message.type === 'transcription') {\n        const transcriptionText = message.data;\n\n        // Only update transcription if it's meaningful (not empty or \"No speech detected\")\n        if (transcriptionText && transcriptionText.trim() !== '' && transcriptionText !== '[No speech detected]' && !transcriptionText.includes('[Transcription error:')) {\n          console.log('âœ… Updating live transcription:', transcriptionText);\n          setTranscription(transcriptionText);\n\n          // Add to history only if it's different from the last one\n          setAllTranscriptions(prev => {\n            if (prev.length === 0 || prev[0] !== transcriptionText) {\n              return [transcriptionText, ...prev];\n            }\n            return prev;\n          });\n        } else {\n          console.log('ðŸ”‡ Ignoring empty/error transcription:', transcriptionText);\n          // Don't update live transcription - keep the previous one visible\n        }\n      }\n    };\n\n    // Add listener - WebRTC streaming will start automatically\n    webRTCService.addListener(handleWebRTCMessage);\n    return () => {\n      console.log('ðŸ§¹ App component', componentId, 'unmounting, removing WebRTC listener');\n      webRTCService.removeListener(handleWebRTCMessage);\n      // WebRTC streaming will stop automatically when no listeners remain\n    };\n  }, []); // Empty dependency array - only run once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(TranscriptionDisplay, {\n        transcription: transcription,\n        allTranscriptions: allTranscriptions,\n        connectionStatus: connectionStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"c0HbjFMl5C29keVZVdrxvntElYs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TranscriptionDisplay","webRTCService","jsxDEV","_jsxDEV","App","_s","transcription","setTranscription","allTranscriptions","setAllTranscriptions","connectionStatus","setConnectionStatus","clearTranscriptionTimer","setClearTranscriptionTimer","componentId","Math","random","toString","substring","console","log","handleWebRTCMessage","message","type","data","transcriptionText","trim","includes","prev","length","addListener","removeListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/SpeakNow/frontend/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport TranscriptionDisplay from './TranscriptionDisplay';\nimport webRTCService from './WebRTCService';\n\nfunction App() {\n  const [transcription, setTranscription] = useState('');\n  const [allTranscriptions, setAllTranscriptions] = useState([]);\n  const [connectionStatus, setConnectionStatus] = useState('Connecting...');\n  const [clearTranscriptionTimer, setClearTranscriptionTimer] = useState(null);\n\n  useEffect(() => {\n    const componentId = Math.random().toString(36).substring(2, 11);\n    console.log('ðŸŽ¯ App component mounted with ID:', componentId, 'setting up WebRTC listener');\n    \n    const handleWebRTCMessage = (message) => {\n      console.log('ðŸ“¨ Component', componentId, 'received WebRTC message:', message);\n      if (message.type === 'status') {\n        setConnectionStatus(message.data);\n      } else if (message.type === 'transcription') {\n        const transcriptionText = message.data;\n        \n        // Only update transcription if it's meaningful (not empty or \"No speech detected\")\n        if (transcriptionText && \n            transcriptionText.trim() !== '' && \n            transcriptionText !== '[No speech detected]' &&\n            !transcriptionText.includes('[Transcription error:')) {\n          \n          console.log('âœ… Updating live transcription:', transcriptionText);\n          setTranscription(transcriptionText);\n          \n          // Add to history only if it's different from the last one\n          setAllTranscriptions(prev => {\n            if (prev.length === 0 || prev[0] !== transcriptionText) {\n              return [transcriptionText, ...prev];\n            }\n            return prev;\n          });\n        } else {\n          console.log('ðŸ”‡ Ignoring empty/error transcription:', transcriptionText);\n          // Don't update live transcription - keep the previous one visible\n        }\n      }\n    };\n\n    // Add listener - WebRTC streaming will start automatically\n    webRTCService.addListener(handleWebRTCMessage);\n\n    return () => {\n      console.log('ðŸ§¹ App component', componentId, 'unmounting, removing WebRTC listener');\n      webRTCService.removeListener(handleWebRTCMessage);\n      // WebRTC streaming will stop automatically when no listeners remain\n    };\n  }, []); // Empty dependency array - only run once\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <TranscriptionDisplay\n          transcription={transcription}\n          allTranscriptions={allTranscriptions}\n          connectionStatus={connectionStatus}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}