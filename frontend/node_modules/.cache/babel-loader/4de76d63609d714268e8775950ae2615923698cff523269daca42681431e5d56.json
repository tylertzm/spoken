{"ast":null,"code":"var _jsxFileName = \"/Users/tyler/Documents/spoken/frontend/src/components/TaskDisplay/TaskDisplay.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskDisplay() {\n  _s();\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    async function getWeather() {\n      setLoading(true);\n      setError(null);\n      try {\n        const res = await fetch('http://localhost:8000/gemma-python', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            prompt: 'what is the task here?'\n          })\n        });\n        if (!res.ok) throw new Error('Failed to fetch Gemma response');\n        const data = await res.json();\n        setResponse(data.response || 'No response');\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getWeather();\n    intervalRef.current = setInterval(getWeather, 3000);\n    return () => clearInterval(intervalRef.current);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-glassbox\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        opacity: 0.7\n      },\n      children: \"Loading weather from Gemma...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: '#ff6b6b',\n        opacity: 0.9\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        opacity: 0.95\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Gemma says:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 41\n      }, this), \" \", response]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskDisplay, \"z8Waemk+noH+EBDV+i1QWe27Vd8=\");\n_c = TaskDisplay;\nexport default TaskDisplay;\nvar _c;\n$RefreshReg$(_c, \"TaskDisplay\");","map":{"version":3,"names":["React","useEffect","useState","useRef","jsxDEV","_jsxDEV","TaskDisplay","_s","response","setResponse","loading","setLoading","error","setError","intervalRef","getWeather","res","fetch","method","headers","body","JSON","stringify","prompt","ok","Error","data","json","err","message","current","setInterval","clearInterval","className","children","style","opacity","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["/Users/tyler/Documents/spoken/frontend/src/components/TaskDisplay/TaskDisplay.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\nfunction TaskDisplay() {\n  const [response, setResponse] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    async function getWeather() {\n      setLoading(true);\n      setError(null);\n      try {\n        const res = await fetch('http://localhost:8000/gemma-python', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ prompt: 'what is the task here?' })\n        });\n        if (!res.ok) throw new Error('Failed to fetch Gemma response');\n        const data = await res.json();\n        setResponse(data.response || 'No response');\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getWeather();\n    intervalRef.current = setInterval(getWeather, 3000);\n    return () => clearInterval(intervalRef.current);\n  }, []);\n\n  return (\n    <div className=\"task-glassbox\">\n      {loading ? (\n        <span style={{ opacity: 0.7 }}>Loading weather from Gemma...</span>\n      ) : error ? (\n        <span style={{ color: '#ff6b6b', opacity: 0.9 }}>Error: {error}</span>\n      ) : (\n        <span style={{ opacity: 0.95 }}><strong>Gemma says:</strong> {response}</span>\n      )}\n    </div>\n  );\n}\n\nexport default TaskDisplay;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMY,WAAW,GAAGX,MAAM,CAAC,IAAI,CAAC;EAEhCF,SAAS,CAAC,MAAM;IACd,eAAec,UAAUA,CAAA,EAAG;MAC1BJ,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACF,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YAAE,cAAc,EAAE;UAAmB,CAAC;UAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,MAAM,EAAE;UAAyB,CAAC;QAC3D,CAAC,CAAC;QACF,IAAI,CAACP,GAAG,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;QAC9D,MAAMC,IAAI,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;QAC7BlB,WAAW,CAACiB,IAAI,CAAClB,QAAQ,IAAI,aAAa,CAAC;MAC7C,CAAC,CAAC,OAAOoB,GAAG,EAAE;QACZf,QAAQ,CAACe,GAAG,CAACC,OAAO,CAAC;MACvB,CAAC,SAAS;QACRlB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF;IACAI,UAAU,CAAC,CAAC;IACZD,WAAW,CAACgB,OAAO,GAAGC,WAAW,CAAChB,UAAU,EAAE,IAAI,CAAC;IACnD,OAAO,MAAMiB,aAAa,CAAClB,WAAW,CAACgB,OAAO,CAAC;EACjD,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEzB,OAAA;IAAK4B,SAAS,EAAC,eAAe;IAAAC,QAAA,EAC3BxB,OAAO,gBACNL,OAAA;MAAM8B,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAI,CAAE;MAAAF,QAAA,EAAC;IAA6B;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,GACjE5B,KAAK,gBACPP,OAAA;MAAM8B,KAAK,EAAE;QAAEM,KAAK,EAAE,SAAS;QAAEL,OAAO,EAAE;MAAI,CAAE;MAAAF,QAAA,GAAC,SAAO,EAACtB,KAAK;IAAA;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,gBAEtEnC,OAAA;MAAM8B,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAK,CAAE;MAAAF,QAAA,gBAAC7B,OAAA;QAAA6B,QAAA,EAAQ;MAAW;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,KAAC,EAAChC,QAAQ;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO;EAC9E;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACjC,EAAA,CAzCQD,WAAW;AAAAoC,EAAA,GAAXpC,WAAW;AA2CpB,eAAeA,WAAW;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}